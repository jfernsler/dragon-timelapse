#!/bin/bash
# ffmepgCmd
#
# Jeremy Fernsler
#  25 - Oct - 2015
#
# lanch an ffmpeg compression of an img sequence to a quicktime
# then fire off a notifiation and cleanup python script
#
# Arguments:
# 1: image directory
# 2: movie name
# 3: timelapse start time
# 4: timelapse end time


imgdir="$1"
movname="$2"
tlStart="$3"
tlEnd="$4"
frCount="$5"

START=`date`

# set the notification LED
sudo python /home/pi/dragon-timelapse/gpio.py COMPRESS 

# ffmpeg command takes a directory of images named imgseq_xxxx.jpg and ensures their
#   scale is set to 1920x1080 and then compresses them at 30fps using the motionjpg
#   codec. 
# set verbose to error to suppress output
/usr/local/bin/ffmpeg -v error -y -probesize 5000000 -f image2 -i "$imgdir"/imgseq_%04d.jpg \
  -c:v mjpeg -qscale:v 1 -pix_fmt yuvj422p -s 1920x1440 \
  -r 30 "$imgdir"/"$movname".mov > "$imgdir"/"$movname"_log.txt

END=`date`

echo ""
echo ""
echo Movie: "$movname".mov compressed
echo Framecount: "$5" frames
echo Capture S: "$tlStart" >> "$imgdir"/"$movname"_log.txt
echo Capture E: "$tlEnd" >> "$imgdir"/"$movname"_log.txt
echo Compression S: "$START" >> "$imgdir"/"$movname"_log.txt
echo Compression E: "$END" >> "$imgdir"/"$movname"_log.txt

# set the notification LED
sudo python /home/pi/dragon-timelapse/gpio.py COMPRESSCOMPLETE 

# echo command for dbug
# echo python ./uploadCleanup.py "$imgdir"/"$movname".mov "$imgdir" "$imgdir"/"$movname"_log.txt

python /home/pi/dragon-timelapse/uploadCleanup.py "$imgdir"/"$movname".mov "$imgdir" "$imgdir"/"$movname"_log.txt
